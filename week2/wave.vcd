$version Generated by VerilatedVcd $end
$date Wed Mar  8 01:47:06 2023
 $end
$timescale  10s $end

 $scope module top $end
  $var wire  1 l clk_i $end
  $var wire  1 k rst_i $end
  $scope module test_top $end
   $var wire  1 ' ce_wire $end
   $var wire  1 l clk_i $end
   $var wire  5 1 exe_mem_reg_waddr_o [4:0] $end
   $var wire 32 3 exe_mem_reg_wdata_o [31:0] $end
   $var wire  1 2 exe_mem_reg_we_o $end
   $var wire  5 e exe_reg_waddr_o [4:0] $end
   $var wire 32 g exe_reg_wdata_o [31:0] $end
   $var wire  1 f exe_reg_we_o $end
   $var wire 32 0 id_exe_inst_o [31:0] $end
   $var wire 32 , id_exe_op1_o [31:0] $end
   $var wire 32 - id_exe_op2_o [31:0] $end
   $var wire  5 / id_exe_reg_waddr_o [4:0] $end
   $var wire  1 . id_exe_reg_we_o $end
   $var wire 32 m id_inst_o [31:0] $end
   $var wire 32 n id_op1_o [31:0] $end
   $var wire 32 o id_op2_o [31:0] $end
   $var wire  5 c id_reg1_addr_o [4:0] $end
   $var wire  1 d id_reg1_re_o $end
   $var wire  5 # id_reg2_addr_o [4:0] $end
   $var wire  1 $ id_reg2_re_o $end
   $var wire  5 q id_reg_waddr_o [4:0] $end
   $var wire  1 p id_reg_we_o $end
   $var wire 32 ) if_id_inst_addr_o [31:0] $end
   $var wire 32 * if_id_inst_o [31:0] $end
   $var wire 32 & if_inst_addr_o [31:0] $end
   $var wire 32 ( if_inst_o [31:0] $end
   $var wire  5 h mem_reg_waddr_o [4:0] $end
   $var wire 32 j mem_reg_wdata_o [31:0] $end
   $var wire  1 i mem_reg_we_o $end
   $var wire  5 4 mem_wb_reg_waddr_o [4:0] $end
   $var wire 32 6 mem_wb_reg_wdata_o [31:0] $end
   $var wire  1 5 mem_wb_reg_we_o $end
   $var wire 32 & pc_wire [31:0] $end
   $var wire 32 r reg1_data_o [31:0] $end
   $var wire 32 + reg2_data_o [31:0] $end
   $var wire  1 k rst_i $end
   $scope module exe0 $end
    $var wire  3 @ funct3 [2:0] $end
    $var wire  7 A funct7 [6:0] $end
    $var wire 32 0 inst_i [31:0] $end
    $var wire 32 , op1_i [31:0] $end
    $var wire 32 - op2_i [31:0] $end
    $var wire  7 ? opcode [6:0] $end
    $var wire  5 / reg_waddr_i [4:0] $end
    $var wire  5 e reg_waddr_o [4:0] $end
    $var wire 32 g reg_wdata_o [31:0] $end
    $var wire  1 . reg_we_i $end
    $var wire  1 f reg_we_o $end
    $var wire  1 k rst_i $end
   $upscope $end
   $scope module exe_mem0 $end
    $var wire  1 l clk_i $end
    $var wire  5 e reg_waddr_i [4:0] $end
    $var wire  5 1 reg_waddr_o [4:0] $end
    $var wire 32 g reg_wdata_i [31:0] $end
    $var wire 32 3 reg_wdata_o [31:0] $end
    $var wire  1 f reg_we_i $end
    $var wire  1 2 reg_we_o $end
    $var wire  1 k rst_i $end
   $upscope $end
   $scope module id0 $end
    $var wire  5 e exe_reg_waddr_i [4:0] $end
    $var wire 32 g exe_reg_wdata_i [31:0] $end
    $var wire  1 f exe_reg_we_i $end
    $var wire 32 u i_op1_o [31:0] $end
    $var wire 32 : i_op2_o [31:0] $end
    $var wire  5 8 i_reg1_raddr_o [4:0] $end
    $var wire  1 9 i_reg1_re_o $end
    $var wire  5 v i_reg2_raddr_o [4:0] $end
    $var wire  1 w i_reg2_re_o $end
    $var wire  5 ; i_reg_waddr_o [4:0] $end
    $var wire  1 9 i_reg_we_o $end
    $var wire 32 ) inst_addr_i [31:0] $end
    $var wire 32 * inst_i [31:0] $end
    $var wire 32 m inst_o [31:0] $end
    $var wire  5 h mem_reg_waddr_i [4:0] $end
    $var wire 32 j mem_reg_wdata_i [31:0] $end
    $var wire  1 i mem_reg_we_i $end
    $var wire 32 n op1_o [31:0] $end
    $var wire 32 s op1_o_final [31:0] $end
    $var wire 32 o op2_o [31:0] $end
    $var wire 32 t op2_o_final [31:0] $end
    $var wire  7 7 opcode [6:0] $end
    $var wire  5 c reg1_raddr_o [4:0] $end
    $var wire 32 r reg1_rdata_i [31:0] $end
    $var wire  1 d reg1_re_o $end
    $var wire  5 # reg2_raddr_o [4:0] $end
    $var wire 32 + reg2_rdata_i [31:0] $end
    $var wire  1 $ reg2_re_o $end
    $var wire  5 q reg_waddr_o [4:0] $end
    $var wire  1 p reg_we_o $end
    $var wire  1 k rst_i $end
    $scope module inst_type_i $end
     $var wire  3 = funct3 [2:0] $end
     $var wire 32 * inst_i [31:0] $end
     $var wire 32 u op1_o [31:0] $end
     $var wire 32 : op2_o [31:0] $end
     $var wire  5 < rd [4:0] $end
     $var wire  5 8 reg1_raddr_o [4:0] $end
     $var wire 32 r reg1_rdata_i [31:0] $end
     $var wire  1 9 reg1_re_o $end
     $var wire  5 v reg2_raddr_o [4:0] $end
     $var wire 32 + reg2_rdata_i [31:0] $end
     $var wire  1 w reg2_re_o $end
     $var wire  5 ; reg_waddr_o [4:0] $end
     $var wire  1 9 reg_we_o $end
     $var wire  5 > rs1 [4:0] $end
    $upscope $end
   $upscope $end
   $scope module id_exe0 $end
    $var wire  1 l clk_i $end
    $var wire 32 m inst_i [31:0] $end
    $var wire 32 0 inst_o [31:0] $end
    $var wire 32 n op1_i [31:0] $end
    $var wire 32 , op1_o [31:0] $end
    $var wire 32 o op2_i [31:0] $end
    $var wire 32 - op2_o [31:0] $end
    $var wire  5 q reg_waddr_i [4:0] $end
    $var wire  5 / reg_waddr_o [4:0] $end
    $var wire  1 p reg_we_i $end
    $var wire  1 . reg_we_o $end
    $var wire  1 k rst_i $end
   $upscope $end
   $scope module if_id0 $end
    $var wire  1 l clk_i $end
    $var wire 32 & inst_addr_i [31:0] $end
    $var wire 32 ) inst_addr_o [31:0] $end
    $var wire 32 ( inst_i [31:0] $end
    $var wire 32 * inst_o [31:0] $end
    $var wire  1 k rst_i $end
   $upscope $end
   $scope module mem0 $end
    $var wire  5 1 reg_waddr_i [4:0] $end
    $var wire  5 h reg_waddr_o [4:0] $end
    $var wire 32 3 reg_wdata_i [31:0] $end
    $var wire 32 j reg_wdata_o [31:0] $end
    $var wire  1 2 reg_we_i $end
    $var wire  1 i reg_we_o $end
    $var wire  1 k rst_i $end
   $upscope $end
   $scope module mem_wb0 $end
    $var wire  1 l clk_i $end
    $var wire  5 h reg_waddr_i [4:0] $end
    $var wire  5 4 reg_waddr_o [4:0] $end
    $var wire 32 j reg_wdata_i [31:0] $end
    $var wire 32 6 reg_wdata_o [31:0] $end
    $var wire  1 i reg_we_i $end
    $var wire  1 5 reg_we_o $end
    $var wire  1 k rst_i $end
   $upscope $end
   $scope module pc_reg0 $end
    $var wire  1 ' ce_o $end
    $var wire  1 l clk_i $end
    $var wire 32 & pc_o [31:0] $end
    $var wire  1 k rst_i $end
   $upscope $end
   $scope module regfile0 $end
    $var wire  1 l clk_i $end
    $var wire 32 % i [31:0] $end
    $var wire  5 c raddr1_i [4:0] $end
    $var wire  5 # raddr2_i [4:0] $end
    $var wire 32 r rdata1_o [31:0] $end
    $var wire 32 + rdata2_o [31:0] $end
    $var wire  1 d re1_i $end
    $var wire  1 $ re2_i $end
    $var wire 32 C regs(0) [31:0] $end
    $var wire 32 D regs(1) [31:0] $end
    $var wire 32 M regs(10) [31:0] $end
    $var wire 32 N regs(11) [31:0] $end
    $var wire 32 O regs(12) [31:0] $end
    $var wire 32 P regs(13) [31:0] $end
    $var wire 32 Q regs(14) [31:0] $end
    $var wire 32 R regs(15) [31:0] $end
    $var wire 32 S regs(16) [31:0] $end
    $var wire 32 T regs(17) [31:0] $end
    $var wire 32 U regs(18) [31:0] $end
    $var wire 32 V regs(19) [31:0] $end
    $var wire 32 E regs(2) [31:0] $end
    $var wire 32 W regs(20) [31:0] $end
    $var wire 32 X regs(21) [31:0] $end
    $var wire 32 Y regs(22) [31:0] $end
    $var wire 32 Z regs(23) [31:0] $end
    $var wire 32 [ regs(24) [31:0] $end
    $var wire 32 \ regs(25) [31:0] $end
    $var wire 32 ] regs(26) [31:0] $end
    $var wire 32 ^ regs(27) [31:0] $end
    $var wire 32 _ regs(28) [31:0] $end
    $var wire 32 ` regs(29) [31:0] $end
    $var wire 32 F regs(3) [31:0] $end
    $var wire 32 a regs(30) [31:0] $end
    $var wire 32 b regs(31) [31:0] $end
    $var wire 32 G regs(4) [31:0] $end
    $var wire 32 H regs(5) [31:0] $end
    $var wire 32 I regs(6) [31:0] $end
    $var wire 32 J regs(7) [31:0] $end
    $var wire 32 K regs(8) [31:0] $end
    $var wire 32 L regs(9) [31:0] $end
    $var wire  1 k rst_i $end
    $var wire  5 4 waddr_i [4:0] $end
    $var wire 32 6 wdata_i [31:0] $end
    $var wire  1 5 we_i $end
   $upscope $end
   $scope module rom0 $end
    $var wire 21 B addr4 [20:0] $end
    $var wire 32 & addr_i [31:0] $end
    $var wire  1 ' ce_i $end
    $var wire  1 l clk_i $end
    $var wire 32 ( inst_o [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#5
b00000 #
0$
b00000000000000000000000000100000 %
b00000000000000000000000000000000 &
0'
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
0.
b00000 /
b00000000000000000000000000000000 0
b00000 1
02
b00000000000000000000000000000000 3
b00000 4
05
b00000000000000000000000000000000 6
b0000000 7
b00000 8
09
b00000000000000000000000000000000 :
b00000 ;
b00000 <
b000 =
b00000 >
b0000000 ?
b000 @
b0000000 A
b000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000 c
0d
b00000 e
0f
b00000000000000000000000000000000 g
b00000 h
1i
b00000000000000000000000000000000 j
1k
0l
b00000000000000000000000000010011 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
0p
b00000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000 v
0w
#10
b00000000000000000000000000010011 *
b00000000000000000000000000010011 0
12
15
b0010011 7
b0010011 ?
1l
#15
0l
#20
1l
#25
0l
#30
1l
#35
0l
#40
1l
#45
0l
#50
1l
#55
0k
0l
#60
1'
b00000000000000000000000000000000 *
02
b0000000 7
0i
1l
#65
0l
#70
b00000000000000000000000000000100 &
b00000000000100101110001010010011 (
05
b000000000000000000100 B
1l
#75
0l
#80
b00000000000000000000000000001000 &
b00000000001000101110000010010011 (
b00000000000000000000000000000100 )
b00000000000100101110001010010011 *
b0010011 7
b00101 8
19
b00000000000000000000000000000001 :
b00101 ;
b00101 <
b110 =
b00101 >
b000000000000000001000 B
b00101 c
1d
1l
b00000000000100101110001010010011 m
b00000000000000000000000000000001 o
1p
b00101 q
b00000000000000000000000000000001 t
#85
0l
#90
b00000000000000000000000000001100 &
b00000000010000101110000100010011 (
b00000000000000000000000000001000 )
b00000000001000101110000010010011 *
b00000000000000000000000000000001 -
1.
b00101 /
b00000000000100101110001010010011 0
b00000000000000000000000000000010 :
b00001 ;
b00001 <
b110 @
b000000000000000001100 B
b00101 e
1f
b00000000000000000000000000000001 g
1l
b00000000001000101110000010010011 m
b00000000000000000000000000000001 n
b00000000000000000000000000000010 o
b00001 q
b00000000000000000000000000000010 t
#95
0l
#100
b00000000000000000000000000010000 &
b00000000100000101110000110010011 (
b00000000000000000000000000001100 )
b00000000010000101110000100010011 *
b00000000000000000000000000000001 ,
b00000000000000000000000000000010 -
b00001 /
b00000000001000101110000010010011 0
b00101 1
12
b00000000000000000000000000000001 3
b00000000000000000000000000000100 :
b00010 ;
b00010 <
b000000000000000010000 B
b00001 e
b00000000000000000000000000000011 g
b00101 h
1i
b00000000000000000000000000000001 j
1l
b00000000010000101110000100010011 m
b00000000000000000000000000000100 o
b00010 q
b00000000000000000000000000000100 t
#105
0l
#110
b00000000000000000000000000010100 &
b00000001000000101110001000010011 (
b00000000000000000000000000010000 )
b00000000100000101110000110010011 *
b00000000000000000000000000000100 -
b00010 /
b00000000010000101110000100010011 0
b00001 1
b00000000000000000000000000000011 3
b00101 4
15
b00000000000000000000000000000001 6
b00000000000000000000000000001000 :
b00011 ;
b00011 <
b000000000000000010100 B
b00010 e
b00000000000000000000000000000101 g
b00001 h
b00000000000000000000000000000011 j
1l
b00000000100000101110000110010011 m
b00000000000000000000000000001000 o
b00011 q
b00000000000000000000000000000001 r
b00000000000000000000000000000001 s
b00000000000000000000000000001000 t
b00000000000000000000000000000001 u
#115
0l
#120
b00000000000000000000000000011000 &
b00000000000000000000000000000000 (
b00000000000000000000000000010100 )
b00000001000000101110001000010011 *
b00000000000000000000000000001000 -
b00011 /
b00000000100000101110000110010011 0
b00010 1
b00000000000000000000000000000101 3
b00001 4
b00000000000000000000000000000011 6
b00000000000000000000000000010000 :
b00100 ;
b00100 <
b000000000000000011000 B
b00000000000000000000000000000001 H
b00011 e
b00000000000000000000000000001001 g
b00010 h
b00000000000000000000000000000101 j
1l
b00000001000000101110001000010011 m
b00000000000000000000000000010000 o
b00100 q
b00000000000000000000000000010000 t
#125
0l
#130
b00000000000000000000000000011100 &
b00000000000000000000000000011000 )
b00000000000000000000000000000000 *
b00000000000000000000000000010000 -
b00100 /
b00000001000000101110001000010011 0
b00011 1
b00000000000000000000000000001001 3
b00010 4
b00000000000000000000000000000101 6
b0000000 7
b00000 8
09
b00000000000000000000000000000000 :
b00000 ;
b00000 <
b000 =
b00000 >
b000000000000000011100 B
b00000000000000000000000000000011 D
b00000 c
0d
b00100 e
b00000000000000000000000000010001 g
b00011 h
b00000000000000000000000000001001 j
1l
b00000000000000000000000000010011 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
0p
b00000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
#135
0l
#140
b00000000000000000000000000100000 &
b00000000000000000000000000011100 )
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
0.
b00000 /
b00000000000000000000000000010011 0
b00100 1
b00000000000000000000000000010001 3
b00011 4
b00000000000000000000000000001001 6
b000 @
b000000000000000100000 B
b00000000000000000000000000000101 E
b00000 e
0f
b00000000000000000000000000000000 g
b00100 h
b00000000000000000000000000010001 j
1l
#145
0l
#150
b00000000000000000000000000100100 &
b00000000000000000000000000100000 )
b00000 1
02
b00000000000000000000000000000000 3
b00100 4
b00000000000000000000000000010001 6
b000000000000000100100 B
b00000000000000000000000000001001 F
b00000 h
0i
b00000000000000000000000000000000 j
1l
#155
0l
#160
b00000000000000000000000000101000 &
b00000000000000000000000000100100 )
b00000 4
05
b00000000000000000000000000000000 6
b000000000000000101000 B
b00000000000000000000000000010001 G
1l
#165
0l
#170
b00000000000000000000000000101100 &
b00000000000000000000000000101000 )
b000000000000000101100 B
1l
#175
0l
#180
b00000000000000000000000000110000 &
b00000000000000000000000000101100 )
b000000000000000110000 B
1l
#185
0l
#190
b00000000000000000000000000110100 &
b00000000000000000000000000110000 )
b000000000000000110100 B
1l
#195
0l
#200
b00000000000000000000000000111000 &
b00000000000000000000000000110100 )
b000000000000000111000 B
1l
#205
0l
#210
b00000000000000000000000000111100 &
b00000000000000000000000000111000 )
b000000000000000111100 B
1l
#215
0l
#220
b00000000000000000000000001000000 &
b00000000000000000000000000111100 )
b000000000000001000000 B
1l
#225
0l
#230
b00000000000000000000000001000100 &
b00000000000000000000000001000000 )
b000000000000001000100 B
1l
#235
0l
#240
b00000000000000000000000001001000 &
b00000000000000000000000001000100 )
b000000000000001001000 B
1l
#245
0l
#250
b00000000000000000000000001001100 &
b00000000000000000000000001001000 )
b000000000000001001100 B
1l
